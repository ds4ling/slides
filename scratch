

















# {.transition visibility="uncounted"}

{{< tweet user=merm_bot id=1841652233651233066 >}}
<!-- another day coding in R --> 


<!-- https://www.react-graph-gallery.com/example/t-test-playground --> 

---

## {.smaller}

```{ojs}
// Import Observable Plot
import { Plot } from "@observablehq/plot";

// Create sliders for slope and intercept
viewof slope = Inputs.range([-5, 5], { 
  value: 1, 
  step: 0.1, 
  label: "Slope", 
  width: 250
});

viewof intercept = Inputs.range([-2, 2], { 
  value: 0, 
  step: 0.1, 
  label: "Intercept", 
  width: 250
});

// Stack sliders vertically
html`<div style="display: flex; flex-direction: column; gap: 20px; align-items: center;">
  <div>${viewof slope}</div>
  <div>${viewof intercept}</div>
</div>`;

// Generate a random dataset with 100 points
randomDataRaw = Array.from({ length: 100 }, () => {
  let x = Math.random() * 10;  // Random x values between 0 and 10
  let noise = (Math.random() - 0.5) * 2;  // Small noise for realism
  let y = x + noise;  // True relationship: y = x + noise
  return { x, y };
});

// Compute mean and standard deviation
meanX = randomDataRaw.reduce((sum, d) => sum + d.x, 0) / randomDataRaw.length;
meanY = randomDataRaw.reduce((sum, d) => sum + d.y, 0) / randomDataRaw.length;

stdX = Math.sqrt(randomDataRaw.reduce((sum, d) => sum + (d.x - meanX) ** 2, 0) / randomDataRaw.length);
stdY = Math.sqrt(randomDataRaw.reduce((sum, d) => sum + (d.y - meanY) ** 2, 0) / randomDataRaw.length);

// Standardize the data
fixedData = randomDataRaw.map(d => ({
  x: (d.x - meanX) / stdX,  // Standardized X
  y: (d.y - meanY) / stdY   // Standardized Y
}));

// Regression line updates dynamically, but data remains fixed
regressionLine = [
  { x: -2, y: slope * -2 + intercept },  // Line starts at x=-2
  { x: 2, y: slope * 2 + intercept }  // Line ends at x=2
]

// Create the scatterplot with fixed axes
Plot.plot({
  width: window.innerWidth,  // Full-width plot
  height: 750,
  marginLeft: 50,
  x: { 
    label: { text: "Standardized X", fontSize: 22 },  // Increase font size for x axis labels
    domain: [-2, 2],  // Fixed X-axis range
    tickFormat: (d) => d.toFixed(1)
  },
  y: { 
    label: { text: "Standardized Y", fontSize: 22 },  // Increase font size for y axis labels
    domain: [-2, 2],  // Fixed Y-axis range
    tickFormat: (d) => d.toFixed(1)
  },
  marks: [
    Plot.dot(fixedData, { x: "x", y: "y", fill: "steelblue", r: 3 }),  // Fixed scatter points
    Plot.line(regressionLine, { x: "x", y: "y", stroke: "red", strokeWidth: 2 })  // Regression line
  ]
})
```
